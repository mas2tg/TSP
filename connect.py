import subprocessfrom PIL import Image, ImageDrawdef connect(image,list_of_generators):	"""	Connect points and finalize TSP art.	param: list of stippled points	return: connected image	"""				with open("tspArtData.tsp", "w") as tspWrite:		tspWrite.write("NAME : tsp-art\n")		tspWrite.write("COMMENT : tsp-art-problem (Snider, Chan)\nTYPE : TSP\n")		tspWrite.write("DIMENSION: %d\n" % len(list_of_generators))		tspWrite.write("EDGE_WEIGHT_TYPE : EUC_2D\nNODE_COORD_SECTION\n")		list_of_generators2 = list_of_generators				for i, list_of_generators2 in enumerate(list_of_generators2):			tspWrite.write("%d %d %d\n"	% (i+1,list_of_generators2[0],list_of_generators2[1]))			print (list_of_generators)		tspWrite.write("EOF\n")		subprocess.call(["concorde/TSP/concorde", "-x", "-B", "tspArtData.tsp"])		tspTour = []		with open("tspArtData.sol", "r") as tspRead:		for i, currentLine in enumerate(tspRead):			if i != 0 and currentLine != "" and currentLine != "\n":				tspTour += [int(x) for x in currentLine.strip().split()]        	img = Image.new('RGB', (image.size[0], image.size[1]), (255, 255, 255))        	draw = ImageDraw.Draw(img)		solution = []        	for i in range(0, len(tspTour)):		solution.append(list_of_generators[tspTour[i]])		draw.line(solution,0,1)	draw.line([solution[len(solution)-1], solution[0]], 0, 1)		return img